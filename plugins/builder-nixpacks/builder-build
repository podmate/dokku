#!/usr/bin/env bash
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

trigger-builder-nixpacks-builder-build() {
  declare desc="builder-nixpacks builder-build plugin trigger"
  declare trigger="builder-build"
  declare BUILDER_TYPE="$1" APP="$2" SOURCECODE_WORK_DIR="$3"

  if [[ "$BUILDER_TYPE" != "nixpacks" ]]; then
    return
  fi

  dokku_log_info1 "Building $APP from nixpacks"

  if ! command -v "nixpacks" &>/dev/null; then
    dokku_log_fail "Missing nixpacks, install it"
  fi

  local IMAGE=$(get_app_image_name "$APP")

  pushd "$SOURCECODE_WORK_DIR" &>/dev/null

  plugn trigger pre-build-nixpacks "$APP"

  no_cache="$(fn-builder-nixpacks-computed-no-cache "$APP")"
  NIXPACKS_ARGS=""
  if [[ "$no_cache" == "true" ]]; then
    NIXPACKS_ARGS="$NIXPACKS_ARGS --no-cache"
  fi

  ENV_ARGS=($(config_export app "$APP" --format pack-keys --merged))
  eval "$(config_export app "$APP" --merged)"

  # shellcheck disable=SC2086
  nixpacks build "$SOURCECODE_WORK_DIR" --label org.label-schema.schema-version=1.0 --label org.label-schema.vendor=dokku --label com.dokku.image-stage=build --label com.dokku.builder-type=nixpacks --label "com.dokku.app-name=$APP" $DOKKU_GLOBAL_BUILD_ARGS $NIXPACKS_ARGS "${ENV_ARGS[@]}" "$IMAGE"

  plugn trigger post-build-nixpacks "$APP"
  popd &>/dev/null || pushd "/tmp" >/dev/null
}

trigger-builder-nixpacks-builder-build "$@"
